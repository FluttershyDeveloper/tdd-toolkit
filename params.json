{"name":"Tdd-toolkit","tagline":"Toolkit used in Test-Driven Development ebook tutorial: github.com/grzesiek-galezowski/tdd-ebook","body":"tdd-toolkit\r\n===========\r\n\r\nToolkit used in Test-Driven Development ebook tutorial: github.com/grzesiek-galezowski/tdd-ebook.\r\n\r\nThe idea of \"Any\" class is taken from guys at www.sustainabletdd.com\r\n\r\nNote: this project does not aim to implement a general-purpose tool with extensibility points, rather, it's an example to start working from when creating your own customized wrapper. If you need hardcore extensibility, go straight to https://github.com/AutoFixture and grab the general purpose tool that has possibilities far beyond generating anonymous data.\r\n\r\nImplemented generation methods:\r\n-\r\n\r\nNumbers\r\n-\r\n\r\nA distinct integer value:  \r\n\r\n    Any.Integer()\r\n    \r\nA distinct double value:  \r\n    \r\n    Any.Double()\r\n    \r\nA distinct long integer value:  \r\n    \r\n    Any.LongInteger()\r\n    \r\nA distinct short integer value:      \r\n    \r\n    Any.ShortInteger()\r\n    \r\nA distinct integer value different than any of the passed values:  \r\n    \r\n    Any.IntegerOtherThan(params int[] excluded)\r\n    \r\nA distinct byte value:\r\n    \r\n    Any.Byte()\r\n    \r\nA distinct byte value different than any of the passed values:      \r\n    \r\n    Any.ByteOtherThan(params byte[] others)\r\n\r\nStrings & chars\r\n-\r\n\r\n    Any.String()\r\n    Any.StringMatching(string pattern)\r\n    Any.StringOfLength(int charactersCount)\r\n    Any.StringOtherThan(params string[] alreadyUsedStrings)\r\n    Any.StringNotContaining(params string[] excludedSubstrings)\r\n    Any.StringContaining(string str)\r\n    Any.AlphaString()\r\n    Any.AlphaString(int maxLength)\r\n    Any.Identifier()\r\n    Any.AlphaChar()\r\n    Any.DigitChar()\r\n\r\nEnums\r\n-\r\n\r\n    Any.Of<T>() where T : struct, IConvertible\r\n    Any.Besides<T>(params T[] excludedValues) where T : struct, IConvertible\r\n    \r\nCollections\r\n-\r\n\r\n    Any.SortedSet<T>()\r\n    Any.EnumerableOfDerivativesFrom<T>() where T : class\r\n    Any.ListOfDerivativesFrom<T>() where T : class\r\n    Any.IEnumerable<T> Enumerable<T>()\r\n    Any.EnumerableWithout<T>(params T[] excluded) where T : class\r\n    Any.Array<T>()\r\n    Any.ArrayWithout<T>(params T[] excluded) where T : class\r\n    Any.List<T> List<T>()\r\n    Any.Set<T>()\r\n    Any.Dictionary<TKey, TValue>()\r\n    Any.EnumerableSortedDescending<T>()\r\n\r\nOthers\r\n-\r\n\r\n    Any.ValueOtherThan<T>(params T[] omittedValues)\r\n    Any.From<T>(params T[] possibleValues)\r\n    Any.DateTime()\r\n    Any.TimeSpan()\r\n    Any.ValueOf<T>()\r\n    Any.LegalXmlTagName()\r\n    Any.Boolean()\r\n    Any.Object()\r\n    Any.Exploding<T>() where T : class\r\n    Any.Method()\r\n    Any.Type()\r\n    Any.InstanceOf<T>() where T : class\r\n    Any.Uri()\r\n    Any.UrlString()\r\n    Any.Exception()\r\n    Any.Port()\r\n    Any.Ip()\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}